@keyframes summonedAnimation {
  0% {
    opacity: 0;
    height: 0;
    width: 0px;
  }

  100% {
    opacity: 100%;
    height: 100px;
    width: 115px;
  }
}

:host.summoned {
  animation: summonedAnimation 0.6s ease-in-out;
}

.card-top {
  display: flex;
  position: relative;
  transition: 0.5s;
}

/* brightness can be used to make element darker */
// .no-turns .card-top {
// filter: brightness(0.65);
// }
.portrait {
  height: 130px;
  width: 127px;
}

.portrait-container {
  position: absolute;
  // z-index: 1000;
  top: -25px;
  user-select: none;
}

// todo: try dvh instead of vh
//  Transformations now can be applied individually.
// object-view-box - allows to cut image without overflow hidden/positioning
// backdrop-filter - only apply filter to background
// width: clamp(min, width, max)
// html popover

/* inver card */
.card-left .portrait {
  scale: -1 1;
}

$portrait-offset: 70%;

/* image offset */
:host-context(.vertical) {
  .card-left .portrait-container {
    right: $portrait-offset;
  }

  .card-right .portrait-container {
    left: $portrait-offset;
  }
}

:host-context(.horizontal) {
  .portrait-container {
    z-index: -1;
    left: 0;
    right: 0;
    top: -94px;
    left: -10px;
  }
}

.health-bar {
  position: relative;
  border-radius: 2px;
  // border: 1px solid whitesmoke;
  overflow: hidden;

  top: -42px;
  width: 70px;

  border-radius: 7px;
  border: 1px solid gold;
}

.card-left .health-bar {
  left: 24px;
}

.card-right .health-bar {
  right: -23px;
}

.card-left {
  text-align: right;
}

.card-right {
  text-align: left;
}

.card-wrapper {
  position: relative;
}

// positioning of abilities and buffs

.abilities {
  position: absolute;
  font-size: 12px;
  top: 0;
  display: flex;
}

:host-context(.vertical) {
  .abilities.left {
    right: 171%;
    flex-direction: row-reverse;
  }

  .abilities.right {
    left: 171%;
  }
}

:host-context(.horizontal) {
  .abilities {
    top: -62%;
    left: -42px;
    flex-direction: column;
  }
}

.card {
  display: block;
  width: 115px;
  height: 100px;
  border-radius: 6px;
  align-items: center;
  box-sizing: border-box;
  font-size: 13px;
  padding: 4px 15px 0;
  color: white;
  border: 3px solid transparent;
  // cursor: pointer;
  user-select: none;
}

.card.current-group {
  border: 3px solid gold;
}

.hovered-enemy {
  border: 3px solid rgba(240, 113, 113, 0.906);
  // cursor: pointer;
}

.column-data {
  display: flex;
  flex-direction: column;
  margin: 0 4px;
}

:host {
  position: relative;
}

$shadow: rgba(0, 0, 0, 0.721);
$active-scale: 1.0;
// $active-offset: 64px;
$active-offset: 32px;
$inactive-offset: 32px;

// $active-scale: 1.087;

/* todo: rework template, css and units themselves someday */
.card-top {
  transition: 0.5s;
  /* shadows are experimental */
  filter: brightness(100%) drop-shadow(0 0 0 $shadow);

  &.active {
    filter: brightness(100%) drop-shadow(2px 4px 6px $shadow);
    scale: $active-scale;
  }

  &.inactive {
    filter: brightness(85%) drop-shadow(0 0 0 $shadow);
  }

  &.defeated {
    filter: brightness(55%) drop-shadow(0 0 0 $shadow);
  }
}

// migrate to individual transforms
:host-context(.vertical) .card-top {
  &.active {
    &.card-left {
      translate: $active-offset 0;
    }

    &.card-right {
      translate: -$active-offset 0;
    }
  }

  &.inactive {
    &.card-left {
      translate: -$inactive-offset 0;
    }

    &.card-right {
      translate: $inactive-offset 0;
    }
  }


  &.defeated {
    &.card-left {
      translate: -$inactive-offset 0;
    }

    &.card-right {
      translate: $inactive-offset 0;
    }
  }
}

:host-context(.horizontal) .card-top {
  // translateY doesn't seem to work properly when used standalone
  &.active {
    &.card-left {
      transform: translateY(-$active-offset);
    }

    &.card-right {
      transform: translateY($active-offset);
    }
  }

  &.inactive {
    &.card-left {
      transform: translateY($inactive-offset);
    }

    &.card-right {
      transform: translateY(-$inactive-offset);
    }
  }


  &.defeated {
    &.card-left {
      transform: translateY($inactive-offset);
    }

    &.card-right {
      transform: translateY(-$inactive-offset);
    }
  }
}
